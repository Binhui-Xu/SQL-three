/*
    1.	In SQL Server, assuming you can find the result by using both joins and subqueries, which one would you prefer to use and why?
        In most case JOIN are faster than subqueries and it is very rare for a sub-query to be faster.The good thing in sub-queries is that they are more readable than JOINs: that's why 
        most new SQL people prefer them; it is the easy way; but when it comes to performance, JOINS are better in most cases even though they are not hard to read too.
    2.	What is CTE and when to use it?
        A CTE defines a temporary result set which you can then use in a SELECT statement. It becomes a convenient way to manage complicated queries.
        CTE can be used to create a recursive query. 
    3.	What are Table Variables? What is their scope and where are they created in SQL Server?
        A table variables is a data type that can be used within a Transact-SQL batch, stored procedure, or function - and is created and defined similarly to a table, only with a strictly
        defined lifetime scope. Unlike regular tables or temporary tables, table variablea cannot have indexes or Foreign key constraints added to them.
        Table variables do allow some constranints to be used in the table definition(primary key, unique, check)
    4.	What is the difference between DELETE and TRUNCATE? Which one will have better performance and why?
        DELETE: DELETE is a DML(Data Manipulation Language) command and is used when we specify the row(tuple) that we want to remove or delete from the table or relation.
        TRUNCATE: TRUNCATE is a DDL(Data Definition Language) command and is used to delete all the rows or tuples from a table. Unlike the DELETE command, TRUNCATE command does not contain 
        a WHERE clause. In the TRUNCATE command, the transaction log for each deleted data page is recorded. Unlike the DELETE command, the TRUNCATE command is fast. Like DELETE, we can 
        rollback the data even after using the TRUNCATE command. 
    5.	What is Identity column? How does DELETE and TRUNCATE affect it?
        An identity column (also known as a feild) in a database table that is made up of values generated by the database. this is much like an AutoNumber field in Microsoft Access or a sequence
        in Oracle. An identity column differs from a primary key in that its values are managed by the server and usually cannot be modified.
        Delete: identity of column retains the identity after using delete statement on table. 
        Truncate: Identity of the column is reset to its seed value if the table contians an identity column.
    6.	What is difference between “delete from table_name” and “truncate table table_name”?
        the first one removes all records from an table.
        the second one removes all rows in a table.he truncate command deletes rows by deallocating the pages. It makes an entry for the de-allocation of pages in the transaction log. It does not 
        log each row deletion in the transaction log.
*/

--1
SELECT distinct c.city
FROM Customers c
WHERE c.City IN(
    select e.City FROM Employees e
)
--2.a
SELECT distinct c.city FROM Customers c
WHERE c.city NOT IN (
    select e.city from Employees e
)
--2.b
SELECT distinct c.city 
FROM Customers c left JOIN Employees e
ON c.City=e.City
WHERE e.city is null AND c.City IS NOT NULL
--3
SELECT p.ProductID,p.ProductName, quantity from Products p
LEFT JOIN(
    select od.productID,sum(Quantity) as quantity
    FROM [Order Details] od
    GROUP BY od.ProductID
) odd
ON p.ProductID=odd.ProductID
--4
select SUM(Quantity) as count,o.ShipCity
FROM [Order Details] od LEFT JOIN (select orderId,shipCity from Orders) o
ON od.OrderID =o.OrderID
WHERE o.ShipCity IN (select city from Customers)
GROUP BY o.ShipCity
--5.a????
select COUNT(customerID),city 
from Customers
GROUP BY City
HAVING COUNT(CustomerID)>=2
--5.b????

--6
SELECT count(productID) as count, o.ShipCity 
FROM Orders o FULL JOIN [Order Details] od 
on o.OrderID=od.OrderID
WHERE ShipCity in (select city from Customers) 
GROUP BY ShipCity
HAVING COUNT(ProductID) >=2
--7
SELECT distinct c.customerId,contactName
from Customers c INNER JOIN (select orderID,CustomerID,shipCity from orders) o 
on c.CustomerID=o.CustomerID
WHERE c.City <> o.ShipCity
--8????
SELECT top 5 productID,sum(quantity) numbers,AVG(UnitPrice) avg
from [Order Details]
GROUP BY ProductID
ORDER BY numbers DESC



--9.a
SELECT city
from Employees
WHERE city not in(
    select shipcity
    from Orders
    WHERE ShipCity is not null
) AND City IS NOT NULL
--9.b
SELECT city FROM Employees e left JOIN orders o
ON e.city=o.ShipCity
WHERE e.City is not null and o.ShipCity is NULL
--10
WITH employeeCTE
as(
select top 1 o.employeeID,count(o.OrderID) as count
from Orders o FULL join [Order Details] od 
on o.OrderID=od.OrderID
GROUP BY EmployeeID
Order BY count DESC
), productCTE
as(
    SELECT top 1 o.ShipCity,sum(Quantity) soldPro
    from Orders o FULL join [Order Details] od 
    on o.OrderID=od.OrderID
    GROUP BY o.ShipCity
    Order by soldPro DESC
)
SELECT city 
from employeeCTE cte join Employees e 
on cte.EmployeeID=e.EmployeeID
WHERE city in (select shipcity from productCTE)
--11????
/*
    WITH CTE
    AS(
        SELECT [col1], [col2], [col3], [col4], [col5], [col6], [col7],
        RN = ROW_NUMBER()OVER(PARTITION BY col1 ORDER BY col1)
        FROM dbo.Table1
    )
    DELETE FROM CTE WHERE RN > 1

*/
--12
/*
    Employee ( empid integer, mgrid integer, deptid integer, salary integer) 
    Dept (deptid integer, deptname text)
*/
SELECT empid from employee 
where empid not in (select mgrid from employee)
--13
SELECT top 1 deptname,sum(empid) count 
from dept d left JOIN Employee E 
on d.peptid=e.deptid
GROUP BY deptname
ORDER BY count DESC
--14




